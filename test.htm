<!DOCTYPE html>
<html>
 <head>
    <meta charset=utf-8>
    <title>Test Conversion from SVG to LDraw</title>
    <meta name="viewport" content="width=device-width" />
    <style>body { background-color: #ddd; } object, svg { background-color: white; }</style>
 </head>
 <body onload="convert_svg();">
  <script src="js/colors.js"></script>
  <script src="js/geometry.js"></script>
  <script src="js/color_transformation.js"></script>
  <script src="js/path_simplification.js"></script>
  <script src="js/bezier_removal.js"></script>
  <script src="js/arc_removal.js"></script>
  <script src="js/convex_hull_decomposition.js"></script>
  <script src="js/tjunctions.js"></script>
  <script src="js/svg2ldraw.js"></script>

  <h3>SVG to Convert</h3>
  <object id="svg_container" 
data="sample_files/gazoo.svg"
type="image/svg+xml"></object>
  <pre id="svg_content"></pre>

  <h3>Processed SVG</h3>
  <div id="svg_processed">
  </div>
  <pre id="svg_content_processed"></pre>

  <h3>LDraw</h3>
  <div id="svg_ldraw">
  </div>
  <pre id="ldraw_result"></pre>
  <script>
function onWarning(w, e) {
  console.warn(w);
  console.warn(e);
}
function onError(e) {
  console.warn('Error: ' + e);
}

function convert_svg() {
  var svg = document.getElementById('svg_container').contentDocument.firstElementChild;

  // Simplify:
  var simplifier = new UTIL.PathSimplification(0.02, onWarning, onError);
  var simplifiedPaths = simplifier.simplifySvgDom(svg);

  // Remove overlapping geometries:
  var paths = {paths:[], width:simplifiedPaths.width, height:simplifiedPaths.height, viewBox:simplifiedPaths.viewBox};
  for(var i = simplifiedPaths.paths.length-1; i >= 0; i--) {
    var chd = new UTIL.ConvexHullDecomposition([simplifiedPaths.paths[i]], onWarning);
    chd.build();
    if(paths.paths.length == 0) {
      paths.paths.push(...chd.paths);
    }
    else {
      paths.paths.push(...UTIL.cut(paths.paths, chd.paths));
    }
  }

  // Add points to prevent T-sections and to be able to combine paths:
  var tjHandler = new UTIL.TJunctionHandler(onWarning);
  paths.paths = tjHandler.addPoints(paths.paths);

  // Combine paths:
  paths.paths = UTIL.combinePaths(paths.paths);

  // Ensure all paths are convex:
  var chd = new UTIL.ConvexHullDecomposition(paths.paths, onWarning);
  chd.build();
  paths.paths = chd.paths;

  // Re-add points to avoid T-Junctions:
  paths.paths = tjHandler.addPoints(paths.paths);
  
  // Output SVG:
  var svg = simplifier.svgObjToSvg(paths);
  document.getElementById('svg_processed').innerHTML = svg;
  document.getElementById('svg_content_processed').appendChild(document.createTextNode(svg));

  // Colors for LDraw:
  var colorTransformation = new LDR.ColorTransformation(); // Option initial mapping as argument
  colorTransformation.transformPaths(paths.paths, function(){});

  // LDraw:
  var lDrawContent = new SVG2LDRAW.Svg().toLDraw(paths, 1, 1, 0, 1); // Last parameters: Thickness, color 1=blue.
  var lDrawSvg = simplifier.svgObjToSvg(paths);

  document.getElementById('svg_ldraw').innerHTML = lDrawSvg;
  document.getElementById('ldraw_result').appendChild(document.createTextNode(lDrawContent));
}
/*
CURRENT FAILURES:
- corvette_flag (missing polygon)
- 
 */
  </script>
 </body>
</html>
