<!DOCTYPE html>
<html>
 <head>
    <meta charset=utf-8>
    <title>Sample Conversion from SVG to LDraw</title>
    <meta name="viewport" content="width=device-width" />
    <style>body { background-color: #ddd; } object, svg { background-color: white; }</style>
 </head>
 <body onload="convert_svg();">
  <script src="js/colors.js"></script>
  <script src="js/geometry.js"></script>
  <script src="js/color_transformation.js"></script>
  <script src="js/path_simplification.js"></script>
  <script src="js/bezier_removal.js"></script>
  <script src="js/trapezoidal_decomposition.js"></script>
  <script src="js/svg2ldraw.js"></script>

  <h3>SVG to Convert</h3>
  <object id="svg_container" data="sample_files/test.svg" type="image/svg+xml"></object> 
  <pre id="svg_content"></pre>

  <h3>Simplified SVG</h3>
  <div id="svg_simplified">
  </div>
  <pre id="svg_content_simplified"></pre>

  <h3>LDraw</h3>
  <div id="svg_ldraw">
  </div>
  <pre id="ldraw_result"></pre>
  <script>
function onWarning(w, e) {
  console.warn(w);
  console.warn(e);
}
function onError(e) {
  console.warn('Error: ' + e);
}

function convert_svg() {
  var svg = document.getElementById('svg_container').contentDocument.firstElementChild;

  // Simplify:
  var simplifier = new UTIL.PathSimplification(0.1, onWarning, onError);
  var simplified = simplifier.simplifySvgDom(svg);

  var simplifiedSvg = simplifier.svgObjToSvg(simplified);
  document.getElementById('svg_simplified').innerHTML = simplifiedSvg;
  document.getElementById('svg_content_simplified').appendChild(document.createTextNode(simplifiedSvg));
   
  // Decomposition:
  var decomposition = new UTIL.TrapezoidalDecomposition(simplified, 0);
  if(!decomposition.buildTrapezoids()) {
    console.log('Intersections discovered in SVG file. Layered approach will be used. Number of paths: ' + decomposition.paths.length);
    for(var i = 0; i < decomposition.paths.length; i++) {
      var s = {paths: [decomposition.paths[i]]};
      var d = new UTIL.TrapezoidalDecomposition(s, -i*0.01);
      if(!d.buildTrapezoids()) {
        console.warn('Self-intersections found in path ' + i);
        continue;
      }
      decomposition.trapezoids.push(...d.trapezoids);
    }
  }

  var colorTransformation = new LDR.ColorTransformation(); // Option initial mapping as argument
  colorTransformation.transformPaths(decomposition.trapezoids, function(){});

  // LDraw:
  var lDrawContent = new SVG2LDRAW.Svg().toLDraw(decomposition, 1, 1);
  simplified.paths = decomposition.trapezoids;
  var lDrawSvg = simplifier.svgObjToSvg(simplified);

  document.getElementById('svg_ldraw').innerHTML = lDrawSvg;
  document.getElementById('ldraw_result').appendChild(document.createTextNode(lDrawContent));
}
  </script>
 </body>
</html>
