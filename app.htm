<!DOCTYPE html>
<html>
 <head>
    <meta charset=utf-8>
    <title>svg2ldraw - Convert SVG Images to LDraw Patterns</title>
    <meta name="viewport" content="width=device-width" />
    <style>
      body {
        font-family: "Arial","Helvetica",sans-serif;
        padding: 0;
        margin: 0;
      }
      h1, h3 {
        text-transform: uppercase;
        display: block;
        text-align: center;
        margin: 0;
        padding: 0.5em;
        font-size: 2em;
      }
      h1 {
        background-color: #000;
        color: white;
      }
      h3 {
        background-color: #9DD;
      }
      .section {
        display: block;
        margin: 0.5em;
      }
      .desc {
        margin: 0.5em;
      }
      .choice {
        display: table;
        margin: 0.5em;
      }
      .choice, textarea, button {
        display: block;
        width: 95%;
      }
      button {
        height: 4em;
      }
      .color_cube {
        display: inline-block;
        width: 1em;
        height: 1em;
        border: 1px solid black;
        margin-left: 0.5em;
        margin-right: 0.5em;
      }
      #contact {
        margin: 2em;
        text-align: center;
      }
    </style>
 </head>
 <body>
  <script src="js/jquery.min.js"></script>
  <script src="js/colors.js"></script>
  <script src="js/geometry.js"></script>
  <script src="js/color_transformation.js"></script>
  <script src="js/path_simplification.js"></script>
  <script src="js/bezier_removal.js"></script>
  <script src="js/trapezoidal_decomposition.js"></script>
  <script src="js/svg2ldraw.js"></script>
  
  <h1>svg2ldraw - Convert SVG Images to LDraw Patterns</h1>

  <h3>Step 1 - SVG Image</h3>
  <div id="select_svg" class="section">
   <span class="desc">
     Select the SVG image using either a URL, a file, or paste the content into the text area below
   </span>
   <span class="choice">
    <label for="svg_url">URL from a website</label>
    <input id="svg_url" name="svg_url" type="text" onchange="readSvgFromUrl(event);" />
   </span>
   <span class="choice">
    <label for="svg_file">File on your device</label>
    <input id="svg_file" name="svg_file" type="file" accept="image/svg+xml" onchange="readSvgFromFile(event);" />
   </span>
   <span class="choice">
    <textarea id="svg_content" rows="20">&lt;!-- Or simply paste the content of the SVG file here --&gt;</textarea>
   </span>
   <div id="svg_container"></div>
  </div>

  <h3>Step 2 - Size and Scaling</h3>
  <div id="select_size" class="section">
   <span class="desc">
     Select the size with 'LDU' as unit. As an example. A 1x1 brick is 20 LDU wide and 24 LDU tall
   </span>
   <span class="choice">
    <label for="width">Width in LDU</label>
    <input id="width" name="width" type="text" onchange="setWidth();" />
   </span>
   <span class="choice">
    <label for="height">Height in LDU</label>
    <input id="height" name="height" type="text" onchange="setHeight();" />
   </span>

   <span class="desc">
     If the svg contains Bezier curves, then they have to be simplified for LDraw. Please select how many many points should be added.
   </span>
   <span class="choice">
    <label for="pointsPerPixel">Points per 100 pixels</label>
    <input id="pointsPerPixel" name="pointsPerPixel" type="text" value="3" onchange="setWidth();" />
   </span>
  </div>

  <h3>Step 3 - Adjust Colors</h3>
  <div id="select_colors" class="section">
   <span class="desc">
     Here you can replace the colors that have been identified.
     Color 16 is the 'base color' which will be replaced with another color when used in a model. Colors appear once there is an SVG file.
   </span>
   <div id="color_choices"></div>
  </div>

  <h3>Step 4 - Download LDraw File</h3>
  <div id="get_ldraw_file" class="section">
   <div id="svg_ldraw">
   </div>
   <span class="choice">
     <textarea id="ldraw_result" rows="10"></textarea>
     <button onclick="copyToClipboard();">Copy LDraw File to Clipboard</button>
   </span>
  </div>

  <div id="contact">
    <a href="https://github.com/LasseD/svg2ldraw">svg2ldraw</a> is in the public domain and may be freely distributed.
    Contact: Lasse Deleuran on <a href="mailto:lasse.deleuran@gmail.com">lasse.deleuran@gmail.com</a>.
  </div>

  <script>
var colorTransformation = new LDR.ColorTransformation();

function resetColors() {
  colorTransformation = new LDR.ColorTransformation();
  $('#color_choices').empty();
}

function setColor(htmlColor, event) {
  var c = colorTransformation.colors[event.value];
  console.log('Setting color ' + htmlColor + ' -> ' + c.id);
  colorTransformation.map[htmlColor] = c;
  convert_svg(null, 1, 1);
}

function makeColorCube(hex) {
  var cube = document.createElement('span');
  cube.setAttribute('class', 'color_cube');
  cube.style.backgroundColor = hex;  
  return cube;
}

function onColorMapped(caller, htmlColor, color) {
  var parent = $('#color_choices')[0];
  var spanEle = document.createElement('span'); parent.appendChild(spanEle);
  spanEle.setAttribute('class', 'choice');

  var labelEle = document.createElement('label'); spanEle.appendChild(labelEle);
  labelEle.innerHTML = htmlColor;
  labelEle.append(makeColorCube(htmlColor));

  var selectEle = document.createElement('select'); spanEle.appendChild(selectEle);
  selectEle.setAttribute('onchange', "setColor('" + htmlColor + "', this)");

  for(var i = 0; i < caller.colors.length; i++) {
    var c = caller.colors[i];
    var optionEle = document.createElement('option'); selectEle.appendChild(optionEle);
    optionEle.setAttribute('value', i);
    optionEle.innerHTML = c.text;
    optionEle.append(makeColorCube(c.hex));
    if(c.id == color.id) {
      optionEle.setAttribute('selected', 'selected');
    }
  }
}

var scale = 1;

function convert_svg(svg, w, h) {
  // Update text area:
  if(!svg) {
    svg = $('#svg_container')[0].innerHTML;
  }
  else {
    $('#svg_content').val(svg);
  }

  // Simplify:
  var ppp = $('#pointsPerPixel')[0].value;
  var simplifier = new UTIL.PathSimplification(ppp / 100);
  var simplified = simplifier.simplifySvg(svg);

  // Resizing:
  if(w <= 0 && h <= 0) {
    $('#width').val(simplified.width);
    $('#height').val(simplified.height);
  }
  else if(w > 0 && h > 0) {
    // Both updating! - reuse old scale.
  }
  else if(w > 0) {
    scale = w / simplified.width;
    $('#height').val(parseInt(scale * simplified.height));
  }
  else {
    scale = h / simplified.height;
    $('#width').val(parseInt(scale * simplified.width));
  }

  // Decomposition:
  var simplifiedSvg = simplifier.svgObjToSvg(simplified);
  var decomposition = new UTIL.TrapezoidalDecomposition(simplified);
  if(!decomposition.buildTrapezoids()) {
    console.log('Intersections discovered in SVG file. Layered approach will be used. Number of paths: ' + decomposition.paths.length);
    for(var i = 0; i < decomposition.paths.length; i++) {
      var s = {paths: [decomposition.paths[i]]};
      var d = new UTIL.TrapezoidalDecomposition(s, -i*0.01);
      if(!d.buildTrapezoids()) {
        console.warn('Self-intersections found in path ' + i);
        continue;
      }
      decomposition.trapezoids.push(...d.trapezoids);
    }
  }

  // Colors:
  colorTransformation.transformPaths(decomposition.trapezoids, onColorMapped);

  // LDraw:
  var lDrawContent = new SVG2LDRAW.Svg().toLDraw(decomposition, scale);
  var lDrawSvg = simplifier.decompositionToSvg(simplified.width, simplified.height, decomposition);

  document.getElementById('svg_ldraw').innerHTML = lDrawSvg;
  $('#ldraw_result').val(lDrawContent);
}

function readSvgFromFile(event) {
  var reader = new FileReader();
  reader.onload = function(){
    var svgTxt = reader.result;
    $('#svg_container').empty().append(svgTxt);
    $('width').val('');
    $('height').val('');
    resetColors();
    convert_svg(svgTxt, 0, 0);
  };
  reader.readAsText(event.target.files[0]);
}

function readSvgFromUrl(event) {
  var url = event.target.value;
  console.log('Reading from URL ' + url);
  var req = new XMLHttpRequest();
  req.onreadystatechange = function() {
    if(req.readyState != 4)
      return;
    if(req.status != 200) {
      console.dir(event);
      return;
    }
    var svgTxt = req.responseText;
    $('#svg_container').empty().append(svgTxt);
    $('width').val('');
    $('height').val('');
    resetColors();
    convert_svg(svgTxt, 0, 0);
  };
  req.open('GET', url, true);
  req.send();
}

function setWidth() {
  var w = $('#width')[0].value;
  if(!w || w < 0)
    return;
  console.log("Resizing to width: " + w);
  convert_svg(null, w, 0);
}

function setHeight() {
  var h = $('#height')[0].value;
  if(!h || h < 0)
    return;
  console.log("Resizing to height: " + h);
  convert_svg(null, 0, h);
}

function copyToClipboard() {
  $('#ldraw_result')[0].select();
  document.execCommand('copy');
}
  </script>
 </body>
</html>
